// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  code         String    @unique
  name         String
  email        String
  password     String
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())
  user_role    UserRole  @relation(fields: [user_role_id], references: [id])
  user_role_id String

  unity           Unity?            @relation(fields: [unity_id], references: [id])
  unity_id        String?
  Schedules       Schedules[]
  ScheduleUserBed ScheduleUserBed[]

  @@map("users")
}

model UserRole {
  id    String @id @default(uuid())
  name  String
  users User[]

  @@map("user_roles")
}

model Company {
  id       String     @id @default(uuid())
  name     String     @unique
  address  String
  Hospital Hospital[]

  @@map("companies")
}

model Hospital {
  id      String @id @default(uuid())
  name    String
  address String

  company    Company @relation(fields: [company_id], references: [id])
  company_id String
  Unity      Unity[]

  @@map("hospitals")
}

model Unity {
  id       String @id @default(uuid())
  name     String
  location String

  hospital    Hospital    @relation(fields: [hospital_id], references: [id])
  hospital_id String
  Bed         Bed[]
  User        User[]
  Schedule    Schedules[]

  @@map("unities")
}

model Bed {
  id   String @id @default(uuid())
  name String

  unity    Unity  @relation(fields: [unity_id], references: [id])
  unity_id String

  classification    Classification    @relation(fields: [classification_id], references: [id])
  classification_id String
  ScheduleUserBed   ScheduleUserBed[]

  @@map("beds")
}

model Classification {
  id             String @id @default(uuid())
  name           String
  color          String
  estimated_time Float
  Bed            Bed[]

  @@map("classifications")
}

model Shift {
  id       String      @id @default(uuid())
  name     String
  Schedule Schedules[]

  @@map("shifts")
}

model Schedules {
  id              String    @id @default(uuid())
  created_at      DateTime? @default(now())
  updated_at      DateTime? @default(now())
  operational_day String?
  cancelled       Boolean?  @default(false)
  workload        Float?

  unity    Unity  @relation(fields: [unity_id], references: [id])
  unity_id String

  user            User   @relation(fields: [user_creator_id], references: [id])
  user_creator_id String

  shift           Shift             @relation(fields: [shift_id], references: [id])
  shift_id        String
  ScheduleUserBed ScheduleUserBed[]

  @@map("schedules")
}

model ScheduleUserBed {
  id             String @id @default(uuid())
  estimated_time Float?

  schedule    Schedules @relation(fields: [schedule_id], references: [id])
  schedule_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  bed    Bed    @relation(fields: [bed_id], references: [id])
  bed_id String

  @@map("schedules_users_beds")
}
